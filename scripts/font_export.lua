-- Export 8x16 font texture into binary numbers, formatted for C
-- 2025 Aethari

-- This script is very messy, and not particularly well-written, but it'll get the job done.
-- To use, simply copy this file into Aseprite's script folder. To open the script folder,
-- open Aseprite and do "File->Scripts->Open Scripts Folder".

-- path dialog - asks user for output path
local pd = Dialog("Sun16 Font Exporter")

pd:canvas{width = 200}

local filepath = app.fs.userDocsPath.."/out.txt"
pd:entry{id="file_path", label = "Ouput file path:", text=filepath}
pd:button{id="confirm", text="Confirm"}
pd:button{id="cancel", text="Cancel"}
pd:show()

local pd_data = pd.data

-- getting the sprite and confirming it exists
local spr = app.sprite
if not spr then
	app.alert("Error: No sprite found. Please run this script with an active sprite in the editor (i.e. not in the home tab)")
	return
end

-- open the file at the specified path, creating it if it doesn't exist
local out = io.open(filepath, "w")

out:write([[/*
 * Sun16's font
 * See font.h for documentation
 *
 * This file was auto-generated by scripts/font_export.lua.
 * If you are making changes that will be applies to the main branch,
 * do not remove any information from this comment.
 */

#define FONT_W 8
#define FONT_H 16

]])

-- generate the output using the sprite
local img = spr.cels[1].image

for i,slice in ipairs(spr.slices) do
	local bounds = slice.bounds
	out:write("int "..slice.name.."[] = {\n")

	for y = bounds.y, bounds.y + bounds.height - 1 do
		local current_num = "0b"

		for x = bounds.x, bounds.x + bounds.width - 1 do
			if x >= 0 and y >= 0 and x < img.width and y < img.height then
				local pc = app.pixelColor
				local pix_value = img:getPixel(x, y)

				local r = pc.rgbaR(pix_value)
				local g = pc.rgbaG(pix_value)
				local b = pc.rgbaB(pix_value)
				local a = pc.rgbaA(pix_value)

				if (r > 0 or g > 0 or b > 0) and a == 255 then
					current_num = current_num.."1"
				else
					current_num = current_num.."0"
				end
			else
				current_num = current_num.."0"
			end
		end

		out:write("\t"..current_num..",\n")
	end

	out:write("};\n\n")
end

out:write([[int *font_get_data(char chr) {
	if(chr == 'A' || chr == 'a') {
		return a;
	} else if(chr == 'B' || chr == 'b') {
		return b;
	} else if(chr == 'C' || chr == 'c') {
		return c;
	} else if(chr == 'D' || chr == 'd') {
		return d;
	} else if(chr == 'E' || chr == 'e') {
		return e;
	} else if(chr == 'F' || chr == 'f') {
		return f;
	} else if(chr == 'G' || chr == 'g') {
		return g;
	} else if(chr == 'H' || chr == 'h') {
		return h;
	} else if(chr == 'I' || chr == 'i') {
		return i;
	} else if(chr == 'J' || chr == 'j') {
		return j;
	} else if(chr == 'K' || chr == 'k') {
		return k;
	} else if(chr == 'L' || chr == 'l') {
		return l;
	} else if(chr == 'M' || chr == 'm') {
		return m;
	} else if(chr == 'N' || chr == 'n') {
		return n;
	} else if(chr == 'O' || chr == 'o') {
		return o;
	} else if(chr == 'P' || chr == 'p') {
		return p;
	} else if(chr == 'Q' || chr == 'q') {
		return q;
	} else if(chr == 'R' || chr == 'r') {
		return r;
	} else if(chr == 'S' || chr == 's') {
		return s;
	} else if(chr == 'T' || chr == 't') {
		return t;
	} else if(chr == 'U' || chr == 'u') {
		return u;
	} else if(chr == 'V' || chr == 'v') {
		return v;
	} else if(chr == 'W' || chr == 'w') {
		return w;
	} else if(chr == 'X' || chr == 'x') {
		return x;
	} else if(chr == 'Y' || chr == 'y') {
		return y;
	} else if(chr == 'Z' || chr == 'z') {
		return z;
	} else if(chr == '1') {
		return num_1;
	} else if(chr == '2') {
		return num_2;
	} else if(chr == '3') {
		return num_3;
	} else if(chr == '4') {
		return num_4;
	} else if(chr == '5') {
		return num_5;
	} else if(chr == '6') {
		return num_6;
	} else if(chr == '7') {
		return num_7;
	} else if(chr == '8') {
		return num_8;
	} else if(chr == '9') {
		return num_9;
	} else if(chr == '0') {
		return num_0;
	} else if(chr == ' ') {
		return char_space;
	} else if(chr == '!') {
		return char_exclamationpoint;
	} else if(chr == '@') {
		return char_at;
	} else if(chr == '#') {
		return char_pound;
	} else if(chr == '$') {
		return char_cash;
	} else if(chr == '%') {
		return char_percent;
	} else if(chr == '^') {
		return char_caret;
	} else if(chr == '&') {
		return char_ampersand;
	} else if(chr == '*') {
		return char_asterisk;
	} else if(chr == '(') {
		return char_openparenthesis;
	} else if(chr == ')') {
		return char_closeparenthesis;
	} else if(chr == '+') {
		return char_plus;
	} else if(chr == '-') {
		return char_minus;
	} else if(chr == '/') {
		return char_slash;
	} else if(chr == '=') {
		return char_equals;
	} else if(chr == '<') {
		return char_lessthan;
	} else if(chr == '>') {
		return char_greaterthan;
	} else if(chr == '.') {
		return char_period;
	} else if(chr == ',') {
		return char_comma;
	} else if(chr == ':') {
		return char_colon;
	} else if(chr == ';') {
		return char_semicolon;
	} else if(chr == '"') {
		return char_doublequotes;
	} else if(chr == '\'') {
		return char_singlequotes;
	} else if(chr == '`') {
		return char_backtick;
	} else if(chr == '~') {
		return char_tilde;
	} else if(chr == '\\') {
		return char_backslash;
	} else {
		// return the missing character
		return char_missing;
	}
}]])

out:close()
